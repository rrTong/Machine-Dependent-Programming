LINE ADDR CONTENTS SOURCE LINE
  1.              ; main program
  2.              	.equ	@, $000
  3.              	.equ	stack, $040
  4.  000 020040  	lds#	stack
  5.  001 030000  	ldf#	0
  6.              
  7.  002 082008  	psh	main_base
  8.  003 082009  	psh	main_exp
  9.  004 412020  	jsr	power
 10.  005 120002  	ads#	2
 11.  006 04200A  	sta	answer
 12.  007 FFFFFF  	hlt
 13.  008 000003  main_base:	.word	3
 14.  009 000004  main_exp:	.word	4
 15.  00A 000000  answer:	.word
 16.              
 17.              ; power function
 18.              	.equ	@, $020
 19.              	.equ	base, 3
 20.              	.equ	exp, 2
 21.              
 22.  020 FFF012  power:	pshf
 23.  021 FFF008  	tsf
 24.              
 25.  022 000001  	lda#	1
 26.  023 04202F  	sta	result
 27.  024 003002  loop:	lda !	exp	; load exp variable by variable on stack instead of 
 28.              			; loading it from a variable
 29.  025 200000  	cma#	0
 30.  026 4C202C  	jle	end
 31.  027 00202F  	lda	result
 32.  028 183003  	mul !	base	; same here, but with base, pulling it from stack
 33.  029 04202F  	sta	result
 34.  02A 1C3002  	dec !	exp	; decrement exponenent
 35.  02B 402024  	jmp	loop
 36.              
 37.  02C 00202F  end:	lda	result	; rather than hlting...
 38.  02D FFF015  	popf		; pop frame pointer, 
 39.  02E FFF040  	rtn		; whatever on top of stack, put it in fp
 40.              ; base:	.word	3
 41.              ; exp:	.word	4
 42.  02F 000000  result:	.word	

                     SYMBOL TABLE CONTENTS

00000A = ANSWER          000003 = BASE            00002C = END             
000002 = EXP             000024 = LOOP            000008 = MAIN_BASE       
000009 = MAIN_EXP        000020 = POWER           00002F = RESULT          
000040 = STACK           