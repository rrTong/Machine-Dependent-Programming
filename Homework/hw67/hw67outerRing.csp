; NAME: Calvin Huang, Ryan Tong
	.equ	@, $000
	.equ	stack, $200
	lds#	stack
	ldf#	0

	psh#	$600	; push starting addr of grid
	psh#	9	; push num of rows
	psh#	8	; push num of cols
	psh#	$700	; push starting addr of newGrid	

	jsr	nextGen	

	ads#	4

	hlt

	.equ	@, $400
	.equ	array1, 5
	.equ	row, 4
	.equ	col, 3
	.equ	array2, 2

nextGen:	pshf
	tsf
	psha
	pshx

loop:	lda	index
	cma#	61
	jgt	end

checkUL:	ldx	index
	sbx#	10
	lda& !	array1
	cma#	0
	jeq	checkU
	inc	neighbors

checkU:	ldx	index
	sbx#	9
	lda& !	array1
	cma#	0
	jeq	checkUR
	inc	neighbors

checkUR:	ldx	index
	sbx#	8
	lda& !	array1
	cma#	0
	jeq	checkL
	inc	neighbors

checkL:	ldx	index
	sbx#	1
	lda& !	array1
	cma#	0
	jeq	checkR
	inc	neighbors

checkR:	ldx	index
	adx#	1
	lda& !	array1
	cma#	0
	jeq	checkDL
	inc	neighbors

checkDL:	ldx	index
	adx#	8
	lda& !	array1
	cma#	0
	jeq	checkD
	inc	neighbors

checkD:	ldx	index
	adx#	9
	lda& !	array1
	cma#	0
	jeq	checkDR
	inc	neighbors

checkDR:	ldx	index
	adx#	10
	lda& !	array1
	cma#	0
	jeq	checkCell
	inc	neighbors

checkCell:	ldx	index
	lda& !	array1
	cma#	0
	jeq	dead

alive:	lda	neighbors
	cma#	2
	jlt	setZero
	cma#	3
	jgt	setZero
	lda#	1
	sta& !	array2
	jmp	incIndex
	
setZero:	lda#	0
	sta& !	array2
	jmp	incIndex

dead:	lda	neighbors
	cma#	3
	jeq	resurrect
	jmp	incIndex

resurrect:	lda#	1
	sta& !	array2	

incIndex:	lda#	0	; reset neighbors
	sta	neighbors

	inc	indexCounter
	
	lda	indexCounter
	cma#	7
	jeq	nextRow
	inc	index	; else, move next pos by 1
	jmp	loop

nextRow:	lda#	3	; move index pos to next row, add 3
	ada	index
	sta	index
	lda#	0	; reset indexCounter
	sta	indexCounter
	jmp	loop

end:	popx
	popa
	popf
	rtn

	.equ	@, $600
grid:	.blkw	9, 0	; 000000000 top row of outer "ring" of 0, row 1
	.word	0	; outer "ring" 0, start of row 2
	.word	0	; $60A [1,1]
	.word	0	; $60B [1,2]
	.word	0	; $60C [1,3]
	.word	0	; $60D [1,4]
	.word	0	; $60E [1,5]
	.word	0	; $60F [1,6]
	.word	0	; $610 [1,7]
	.word	0	; outer "ring" 0, end of row 2
	.word	0	; outer "ring" 0, start of row 3
	.word	0	; $613 [2,1]
	.word	0	; $614 [2,2]
	.word	1	; $615 [2,3]
	.word	0	; $616 [2,4]
	.word	0	; $617 [2,5]
	.word	0	; $618 [2,6]
	.word	0	; $619 [2,7]
	.word	0	; outer "ring" 0, end of row 3
	.word	0	; outer "ring" 0, start of row 4
	.word	0	; $61C [3,1]
	.word	0	; $61D [3,2]
	.word	0	; $61E [3,3]
	.word	1	; $61F [3,4]
	.word	0	; $620 [3,5]
	.word	0	; $621 [3,6]
	.word	0	; $622 [3,7]
	.word	0	; outer "ring" 0, end of row 4
	.word	0	; outer "ring" 0, start of row 5
	.word	0	; $625 [4,1]
	.word	1	; $626 [4,2]
	.word	1	; $627 [4,3]
	.word	1	; $628 [4,4]
	.word	0	; $629 [4,5]
	.word	0	; $62A [4,6]
	.word	0	; $62B [4,7]
	.word	0	; outer "ring" 0, end of row 5
	.word	0	; outer "ring" 0, start of row 6
	.word	0	; $62E [5,1]
	.word	0	; $62F [5,2]
	.word	0	; $630 [5,3]
	.word	0	; $631 [5,4]
	.word	0	; $632 [5,5]
	.word	0	; $633 [5,6]
	.word	0	; $634 [5,7]
	.word	0	; outer "ring" 0, end of row 6
	.word	0	; outer "ring" 0, start of row 7
	.word	0	; $637 [6,1]
	.word	0	; $638 [6,2]
	.word	0	; $639 [6,3]
	.word	0	; $63A [6,4]
	.word	0	; $63B [6,5]
	.word	0	; $63C [6,6]
	.word	9	; $63D [6,7]
	.word	0	; outer "ring" 0, end of row 7
	.blkw	9, 0	; 000000000 bot row of outer "ring" of 0, row 8
	.equ	@, $700
newGrid:	.blkw	72, 0
	.end

	.equ	@, $800	; variables
neighbors:	.word	0
index:	.word	10
indexCounter:	.word	0